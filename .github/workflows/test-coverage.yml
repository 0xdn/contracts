name: Test and Coverage

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

# Add permissions for the GitHub token
permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install bc
        run: sudo apt-get install -y bc

      - name: Compile contracts
        run: npm run compile

      - name: Run tests
        run: npm test

      - name: Run coverage
        run: SOLIDITY_COVERAGE=true npm run test:coverage

      - name: Check coverage thresholds
        id: coverage
        run: |
          # Extract coverage percentages from coverage.json
          STATEMENTS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage.json')).total.statements.pct)")
          BRANCHES=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage.json')).total.branches.pct)")
          FUNCTIONS=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage.json')).total.functions.pct)")
          LINES=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./coverage.json')).total.lines.pct)")
          
          # Define minimum thresholds
          MIN_STATEMENTS=85
          MIN_BRANCHES=60
          MIN_FUNCTIONS=80
          MIN_LINES=85
          
          # Export variables for later steps
          echo "STATEMENTS=$STATEMENTS" >> $GITHUB_ENV
          echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "FUNCTIONS=$FUNCTIONS" >> $GITHUB_ENV
          echo "LINES=$LINES" >> $GITHUB_ENV
          echo "MIN_STATEMENTS=$MIN_STATEMENTS" >> $GITHUB_ENV
          echo "MIN_BRANCHES=$MIN_BRANCHES" >> $GITHUB_ENV
          echo "MIN_FUNCTIONS=$MIN_FUNCTIONS" >> $GITHUB_ENV
          echo "MIN_LINES=$MIN_LINES" >> $GITHUB_ENV
          
          # Check if coverage meets thresholds using node for comparison
          if (( $(node -e "console.log($STATEMENTS < $MIN_STATEMENTS ? 1 : 0)") )); then
            echo "Statement coverage ($STATEMENTS%) is below the minimum threshold ($MIN_STATEMENTS%)"
            exit 1
          fi
          
          if (( $(node -e "console.log($BRANCHES < $MIN_BRANCHES ? 1 : 0)") )); then
            echo "Branch coverage ($BRANCHES%) is below the minimum threshold ($MIN_BRANCHES%)"
            exit 1
          fi
          
          if (( $(node -e "console.log($FUNCTIONS < $MIN_FUNCTIONS ? 1 : 0)") )); then
            echo "Function coverage ($FUNCTIONS%) is below the minimum threshold ($MIN_FUNCTIONS%)"
            exit 1
          fi
          
          if (( $(node -e "console.log($LINES < $MIN_LINES ? 1 : 0)") )); then
            echo "Line coverage ($LINES%) is below the minimum threshold ($MIN_LINES%)"
            exit 1
          fi
          
          echo "All coverage thresholds passed!"
          
          # Calculate overall coverage for summary
          OVERALL=$(node -e "console.log(Math.round(($STATEMENTS + $BRANCHES + $FUNCTIONS + $LINES) / 4))")
          echo "OVERALL=$OVERALL" >> $GITHUB_ENV

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          
      - name: Comment PR with coverage results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            const statements = process.env.STATEMENTS;
            const branches = process.env.BRANCHES;
            const functions = process.env.FUNCTIONS;
            const lines = process.env.LINES;
            const overall = process.env.OVERALL;
            
            const minStatements = process.env.MIN_STATEMENTS;
            const minBranches = process.env.MIN_BRANCHES;
            const minFunctions = process.env.MIN_FUNCTIONS;
            const minLines = process.env.MIN_LINES;
            
            const statementsStatus = parseFloat(statements) >= parseFloat(minStatements) ? '✅' : '❌';
            const branchesStatus = parseFloat(branches) >= parseFloat(minBranches) ? '✅' : '❌';
            const functionsStatus = parseFloat(functions) >= parseFloat(minFunctions) ? '✅' : '❌';
            const linesStatus = parseFloat(lines) >= parseFloat(minLines) ? '✅' : '❌';
            
            const body = `## Coverage Report
            
            | Metric | Coverage | Threshold | Status |
            | ------ | -------- | --------- | ------ |
            | Statements | ${statements}% | ${minStatements}% | ${statementsStatus} |
            | Branches | ${branches}% | ${minBranches}% | ${branchesStatus} |
            | Functions | ${functions}% | ${minFunctions}% | ${functionsStatus} |
            | Lines | ${lines}% | ${minLines}% | ${linesStatus} |
            | **Overall** | **${overall}%** | | |
            
<<<<<<< HEAD
            [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 
=======
            [View detailed coverage report](https://github.com/${owner}/${repo}/actions/runs/${context.runId})`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number
            });
            
            const coverageComment = comments.data.find(comment => 
              comment.body.includes('## Coverage Report')
            );
            
            if (coverageComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: coverageComment.id,
                body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
            } 
>>>>>>> a2d02e7 (feat: Update GitHub Actions workflow to enhance coverage reporting with improved permissions and dynamic comment handling)
