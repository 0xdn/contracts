import { BigInt, Address, log } from '@graphprotocol/graph-ts'
import {
  RewardDistributed,
  NFTClaimReward,
  NFTUpgradeReward,
  DCUDistributed
} from '../generated/RewardLogic/RewardLogic'
import { 
  User, 
  RewardDistribution,
  NFTClaimReward as NFTClaimRewardEntity,
  NFTUpgradeReward as NFTUpgradeRewardEntity,
  DCUDistribution as DCUDistributionEntity,
  Global
} from '../generated/schema'

// Helper function to ensure User entity exists
function getOrCreateUser(address: Address): User {
  let userId = address.toHexString()
  let user = User.load(userId)
  
  if (!user) {
    user = new User(userId)
    user.totalClaims = 0
    user.totalUpgrades = 0
    user.totalRewards = BigInt.fromI32(0)
    user.createdAt = BigInt.fromI32(0)
    user.lastActivity = BigInt.fromI32(0)
  }
  
  return user
}

// Helper function to ensure Global entity exists
function getOrCreateGlobal(): Global {
  let global = Global.load('global')
  
  if (!global) {
    global = new Global('global')
    global.totalNFTsClaimed = 0
    global.totalUpgrades = 0
    global.totalRewardsDistributed = BigInt.fromI32(0)
    global.lastUpdated = BigInt.fromI32(0)
  }
  
  return global
}

// Handle the RewardDistributed event
export function handleRewardDistributed(event: RewardDistributed): void {
  let user = getOrCreateUser(event.params.user)
  let global = getOrCreateGlobal()
  
  // Update user data
  user.totalRewards = user.totalRewards.plus(event.params.amount)
  user.lastActivity = event.params.timestamp
  
  // Create reward distribution record
  let distributionId = event.transaction.hash.toHexString() + '-' + event.logIndex.toString()
  let distribution = new RewardDistribution(distributionId)
  distribution.user = user.id
  distribution.amount = event.params.amount
  distribution.nftBalance = event.params.nftBalance.toI32()
  distribution.timestamp = event.params.timestamp
  distribution.transaction = event.transaction.hash.toHexString()
  
  // Update global stats
  global.totalRewardsDistributed = global.totalRewardsDistributed.plus(event.params.amount)
  global.lastUpdated = event.params.timestamp
  
  // Save entities
  user.save()
  distribution.save()
  global.save()
}

// Handle the NFTClaimReward event
export function handleNFTClaimReward(event: NFTClaimReward): void {
  let user = getOrCreateUser(event.params.user)
  let global = getOrCreateGlobal()
  
  // Update user data
  user.totalRewards = user.totalRewards.plus(event.params.amount)
  user.lastActivity = event.params.timestamp
  
  // Create NFT claim reward record
  let claimRewardId = event.transaction.hash.toHexString() + '-' + event.logIndex.toString()
  let claimReward = new NFTClaimRewardEntity(claimRewardId)
  claimReward.user = user.id
  claimReward.tokenId = event.params.tokenId
  claimReward.amount = event.params.amount
  claimReward.timestamp = event.params.timestamp
  claimReward.transaction = event.transaction.hash.toHexString()
  
  // Update global stats
  global.totalRewardsDistributed = global.totalRewardsDistributed.plus(event.params.amount)
  global.lastUpdated = event.params.timestamp
  
  // Save entities
  user.save()
  claimReward.save()
  global.save()
}

// Handle the NFTUpgradeReward event
export function handleNFTUpgradeReward(event: NFTUpgradeReward): void {
  let user = getOrCreateUser(event.params.user)
  let global = getOrCreateGlobal()
  
  // Update user data
  user.totalRewards = user.totalRewards.plus(event.params.amount)
  user.lastActivity = event.params.timestamp
  
  // Create NFT upgrade reward record
  let upgradeRewardId = event.transaction.hash.toHexString() + '-' + event.logIndex.toString()
  let upgradeReward = new NFTUpgradeRewardEntity(upgradeRewardId)
  upgradeReward.user = user.id
  upgradeReward.tokenId = event.params.tokenId
  upgradeReward.newLevel = event.params.newLevel.toI32()
  upgradeReward.amount = event.params.amount
  upgradeReward.timestamp = event.params.timestamp
  upgradeReward.transaction = event.transaction.hash.toHexString()
  
  // Update global stats
  global.totalRewardsDistributed = global.totalRewardsDistributed.plus(event.params.amount)
  global.lastUpdated = event.params.timestamp
  
  // Save entities
  user.save()
  upgradeReward.save()
  global.save()
}

// Handle the DCUDistributed event
export function handleDCUDistributed(event: DCUDistributed): void {
  let user = getOrCreateUser(event.params.user)
  let global = getOrCreateGlobal()
  
  // Update user data
  user.totalRewards = user.totalRewards.plus(event.params.amount)
  user.lastActivity = event.params.timestamp
  
  // Create DCU distribution record
  let distributionId = event.transaction.hash.toHexString() + '-' + event.logIndex.toString()
  let distribution = new DCUDistributionEntity(distributionId)
  distribution.user = user.id
  distribution.amount = event.params.amount
  distribution.timestamp = event.params.timestamp
  distribution.reason = event.params.reason
  distribution.transaction = event.transaction.hash.toHexString()
  
  // Update global stats
  global.totalRewardsDistributed = global.totalRewardsDistributed.plus(event.params.amount)
  global.lastUpdated = event.params.timestamp
  
  // Save entities
  user.save()
  distribution.save()
  global.save()
} 